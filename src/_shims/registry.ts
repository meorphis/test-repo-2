LyoqCiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBp
bnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuCiAqLwppbXBv
cnQgeyB0eXBlIFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vY29yZSc7Cgpl
eHBvcnQgaW50ZXJmYWNlIFNoaW1zIHsKICBraW5kOiBzdHJpbmc7CiAgZmV0
Y2g6IGFueTsKICBSZXF1ZXN0OiBhbnk7CiAgUmVzcG9uc2U6IGFueTsKICBI
ZWFkZXJzOiBhbnk7CiAgRm9ybURhdGE6IGFueTsKICBCbG9iOiBhbnk7CiAg
RmlsZTogYW55OwogIFJlYWRhYmxlU3RyZWFtOiBhbnk7CiAgZ2V0TXVsdGlw
YXJ0UmVxdWVzdE9wdGlvbnM6IDxUID0gUmVjb3JkPHN0cmluZywgdW5rbm93
bj4+KAogICAgZm9ybTogU2hpbXNbJ0Zvcm1EYXRhJ10sCiAgICBvcHRzOiBS
ZXF1ZXN0T3B0aW9uczxUPiwKICApID0+IFByb21pc2U8UmVxdWVzdE9wdGlv
bnM8VD4+OwogIGdldERlZmF1bHRBZ2VudDogKHVybDogc3RyaW5nKSA9PiBh
bnk7CiAgZmlsZUZyb21QYXRoOgogICAgfCAoKHBhdGg6IHN0cmluZywgZmls
ZW5hbWU/OiBzdHJpbmcsIG9wdGlvbnM/OiB7fSkgPT4gUHJvbWlzZTxTaGlt
c1snRmlsZSddPikKICAgIHwgKChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiB7
fSkgPT4gUHJvbWlzZTxTaGltc1snRmlsZSddPik7CiAgaXNGc1JlYWRTdHJl
YW06ICh2YWx1ZTogYW55KSA9PiBib29sZWFuOwp9CgpleHBvcnQgbGV0IGF1
dG8gPSBmYWxzZTsKZXhwb3J0IGxldCBraW5kOiBTaGltc1sna2luZCddIHwg
dW5kZWZpbmVkID0gdW5kZWZpbmVkOwpleHBvcnQgbGV0IGZldGNoOiBTaGlt
c1snZmV0Y2gnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsKZXhwb3J0IGxl
dCBSZXF1ZXN0OiBTaGltc1snUmVxdWVzdCddIHwgdW5kZWZpbmVkID0gdW5k
ZWZpbmVkOwpleHBvcnQgbGV0IFJlc3BvbnNlOiBTaGltc1snUmVzcG9uc2Un
XSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsKZXhwb3J0IGxldCBIZWFkZXJz
OiBTaGltc1snSGVhZGVycyddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkOwpl
eHBvcnQgbGV0IEZvcm1EYXRhOiBTaGltc1snRm9ybURhdGEnXSB8IHVuZGVm
aW5lZCA9IHVuZGVmaW5lZDsKZXhwb3J0IGxldCBCbG9iOiBTaGltc1snQmxv
YiddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkOwpleHBvcnQgbGV0IEZpbGU6
IFNoaW1zWydGaWxlJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7CmV4cG9y
dCBsZXQgUmVhZGFibGVTdHJlYW06IFNoaW1zWydSZWFkYWJsZVN0cmVhbSdd
IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkOwpleHBvcnQgbGV0IGdldE11bHRp
cGFydFJlcXVlc3RPcHRpb25zOiBTaGltc1snZ2V0TXVsdGlwYXJ0UmVxdWVz
dE9wdGlvbnMnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsKZXhwb3J0IGxl
dCBnZXREZWZhdWx0QWdlbnQ6IFNoaW1zWydnZXREZWZhdWx0QWdlbnQnXSB8
IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsKZXhwb3J0IGxldCBmaWxlRnJvbVBh
dGg6IFNoaW1zWydmaWxlRnJvbVBhdGgnXSB8IHVuZGVmaW5lZCA9IHVuZGVm
aW5lZDsKZXhwb3J0IGxldCBpc0ZzUmVhZFN0cmVhbTogU2hpbXNbJ2lzRnNS
ZWFkU3RyZWFtJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7CgpleHBvcnQg
ZnVuY3Rpb24gc2V0U2hpbXMoc2hpbXM6IFNoaW1zLCBvcHRpb25zOiB7IGF1
dG86IGJvb2xlYW4gfSA9IHsgYXV0bzogZmFsc2UgfSkgewogIGlmIChhdXRv
KSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgIGB5b3UgbXVzdCBcYGlt
cG9ydCAnbWVvcnBoaXMtdGVzdC00L3NoaW1zLyR7c2hpbXMua2luZH0nXGAg
YmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gbWVvcnBoaXMt
dGVzdC00YCwKICAgICk7CiAgfQogIGlmIChraW5kKSB7CiAgICB0aHJvdyBu
ZXcgRXJyb3IoCiAgICAgIGBjYW4ndCBcYGltcG9ydCAnbWVvcnBoaXMtdGVz
dC00L3NoaW1zLyR7c2hpbXMua2luZH0nXGAgYWZ0ZXIgXGBpbXBvcnQgJ21l
b3JwaGlzLXRlc3QtNC9zaGltcy8ke2tpbmR9J1xgYCwKICAgICk7CiAgfQog
IGF1dG8gPSBvcHRpb25zLmF1dG87CiAga2luZCA9IHNoaW1zLmtpbmQ7CiAg
ZmV0Y2ggPSBzaGltcy5mZXRjaDsKICBSZXF1ZXN0ID0gc2hpbXMuUmVxdWVz
dDsKICBSZXNwb25zZSA9IHNoaW1zLlJlc3BvbnNlOwogIEhlYWRlcnMgPSBz
aGltcy5IZWFkZXJzOwogIEZvcm1EYXRhID0gc2hpbXMuRm9ybURhdGE7CiAg
QmxvYiA9IHNoaW1zLkJsb2I7CiAgRmlsZSA9IHNoaW1zLkZpbGU7CiAgUmVh
ZGFibGVTdHJlYW0gPSBzaGltcy5SZWFkYWJsZVN0cmVhbTsKICBnZXRNdWx0
aXBhcnRSZXF1ZXN0T3B0aW9ucyA9IHNoaW1zLmdldE11bHRpcGFydFJlcXVl
c3RPcHRpb25zOwogIGdldERlZmF1bHRBZ2VudCA9IHNoaW1zLmdldERlZmF1
bHRBZ2VudDsKICBmaWxlRnJvbVBhdGggPSBzaGltcy5maWxlRnJvbVBhdGg7
CiAgaXNGc1JlYWRTdHJlYW0gPSBzaGltcy5pc0ZzUmVhZFN0cmVhbTsKfQo=
